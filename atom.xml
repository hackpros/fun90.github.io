<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fun90</title>
  <subtitle>学习始于记录，贵在思考</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fun90.github.io/"/>
  <updated>2017-06-20T12:10:24.000Z</updated>
  <id>http://fun90.github.io/</id>
  
  <author>
    <name>Fun90</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dubbo异常：forbid consumer</title>
    <link href="http://fun90.github.io/2016/06/14/dubbo-forbid-whitelist/"/>
    <id>http://fun90.github.io/2016/06/14/dubbo-forbid-whitelist/</id>
    <published>2016-06-14T13:56:17.000Z</published>
    <updated>2017-06-20T12:10:24.000Z</updated>
    
    <content type="html"><![CDATA[<section style="padding: 2rem 4rem;background:#333; text-align:center;"><br><div style="color:#fff;font-size:3.25rem; font-weight:bold;">DUBBO</div><br></section>

<p>使用Dubbo开发过程中，经常会遇到forbid consumer whitelist/blacklist的错误.<br>日志提示当前调用者被禁止访问某个服务，请检查下注册中心访问列表，还有黑名单和白名单。<br>实际情况是我并根本没有对服务做白名单和黑名单机制.<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.alibaba.dubbo.rpc.RpcException: Forbid consumer 10.159.98.101 access service com.ai.ecs.order.api.OrderService from registry 10.154.73.105:2181 use dubbo version 2.5.3, Please check registry access list (whitelist/blacklist).</div></pre></td></tr></table></figure></p>
<p>根据异常栈，抛出这个异常的代码在RegistryDirectory的第579行，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> List&lt;Invoker&lt;T&gt;&gt; doList(Invocation invocation) &#123;</div><div class="line"> <span class="keyword">if</span> (forbidden ) &#123;</div><div class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(RpcException.FORBIDDEN_EXCEPTION , ” Forbid consumer “ +  NetUtils. getLocalHost() + ” access service “ +        getInterface().getName() + ” from registry “ + getUrl().getAddress() + ” use dubbo version “ + Version.getVersion() + “, <span class="function">Please check registry access <span class="title">list</span> <span class="params">(whitelist/blacklist)</span>.”)</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>forbidden变量默认为false，那么什么时候变成true了呢？<br>看RegistryDirectory的这段代码：</p>
<pre><code class="java"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshInvoker</span><span class="params">(List&lt;URL&gt; invokerUrls)</span></span>{
   <span class="keyword">if</span> (invokerUrls != <span class="keyword">null</span> &amp;&amp; invokerUrls.size() == <span class="number">1</span> &amp;&amp; invokerUrls.get(<span class="number">0</span>) != <span class="keyword">null</span> &amp;&amp; Constants.EMPTY_PROTOCOL .equals(invokerUrls.get(<span class="number">0</span>).getProtocol())) {
            <span class="keyword">this</span>.forbidden = <span class="keyword">true</span>; <span class="comment">// 禁止访问</span>
            <span class="keyword">this</span>.methodInvokerMap = <span class="keyword">null</span>; <span class="comment">// 置空列表</span>
            destroyAllInvokers(); <span class="comment">// 关闭所有Invoker</span>
   }
</code></pre>
<p>如果invokerUrls的size为1，并且url的协议头是Constants.EMPTY_PROTOCOL时，则设置forbidden为true，Constants.EMPTY_PROTOCOL的值是empty。</p>
<p>refreshInvoker方法什么时候被调用呢？当某个服务的provider有变化时就会被调用，例如zookeeper上某个服务的provider目录里的内容发生变化，则zk监听器会被触发，由于provider的数量会发生变化，例如有一个新的provider启动了，有一个provider下线了，所以必须刷新本地的对provider的连接，具体逻辑就在refreshInvoker方法里。</p>
<p>当zookeeper初次订阅或者订阅的信息有变更时，都会触发toUrlsChanged方法，看看这个方法内部都做了什么，完整代码如下：  </p>
<pre><code class="java"><span class="function"><span class="keyword">private</span> List&lt;URL&gt; <span class="title">toUrlsWithEmpty</span><span class="params">(URL consumer, String path, List&lt;String&gt; providers)</span> </span>{
        List&lt;URL&gt; urls = toUrlsWithoutEmpty(consumer, providers);
        <span class="keyword">if</span> (urls == <span class="keyword">null</span> || urls.isEmpty()) {
            <span class="keyword">int</span> i = path.lastIndexOf(<span class="string">'/'</span>);
            String category = i &lt; <span class="number">0</span> ? path : path.substring(i + <span class="number">1</span>);
            URL empty = consumer.setProtocol(Constants.EMPTY_PROTOCOL).addParameter(Constants.CATEGORY_KEY, category);
            urls.add(empty);
        }
        <span class="keyword">return</span> urls;
    }
</code></pre>
<p>可见如果toUrlsWithoutEmpty的结果是空或者size为0，则强制返回一个protocol为empty的url，看来源头就在这里了。传入的List<string> providers实际上就是最新的服务提供者信息，当某个服务没有任何provider时，providers就变为一个size为0的List了，导致返回一个协议头为empty的url，进而导致forbidden为true，屏蔽了consumer调用。</string></p>
]]></content>
    
    <summary type="html">
    
      &lt;section style=&quot;padding: 2rem 4rem;background:#333; text-align:center;&quot;&gt;&lt;br&gt;&lt;div style=&quot;color:#fff;font-size:3.25rem; font-weight:bold;&quot;&gt;DUBBO&lt;/div&gt;&lt;br&gt;&lt;/section&gt;

&lt;p&gt;使用Dubbo开发过程中，经常会遇到forbid consumer whitelist/blacklist的错误.&lt;br&gt;日志提示当前调用者被禁止访问某个服务，请检查下注册中心访问列表，还有黑名单和白名单。&lt;br&gt;实际情况是我并根本没有对服务做白名单和黑名单机制.
    
    </summary>
    
    
      <category term="DUBBO" scheme="http://fun90.github.io/tags/DUBBO/"/>
    
  </entry>
  
  <entry>
    <title>Spring事务</title>
    <link href="http://fun90.github.io/2015/08/10/spring-tx/"/>
    <id>http://fun90.github.io/2015/08/10/spring-tx/</id>
    <published>2015-08-10T14:37:15.000Z</published>
    <updated>2017-07-03T15:41:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事务传递"><a href="#事务传递" class="headerlink" title="事务传递"></a>事务传递</h2><p><img src="http://7xnocv.com1.z0.glb.clouddn.com/spring-tx-1.png" alt=""><br><a id="more"></a></p>
<h2 id="事务配置"><a href="#事务配置" class="headerlink" title="事务配置"></a>事务配置</h2><p>分为2类：拦截器、注解</p>
<h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置事务属性 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 定义查询方法只读 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"query*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 主数据库操作 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 其它方法使用默认事务策略 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 配置切面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 定义切面，所有的service的所有的方法 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.test.spring.service.*.*(..))"</span> <span class="attr">id</span>=<span class="string">"txPointcut"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 添加事务到切面上 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointcut"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 使事务注解生效 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>使用了Hibernate，class替换为org.springframework.orm.hibernate3.HibernateTransactionManager</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span>(propagation= Propagation.REQUIRED,rollbackFor=Exception.class,timeout=<span class="number">1</span>,isolation= Isolation.DEFAULT)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Map&lt;String, Object&gt; map)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>在要使用事务管理的类或者方法上增加代码@Transactional，Spring官方团队建议不要在接口使用。在类上使用@Transactional，类中的所有public方法都将使用事务。</p>
<p>在public方法上使用@Transactional，则该方法使用事务；非public方法使用@Transactional不会报错，但也不会使用事务，相当于“白做”。</p>
<h2 id="事务传播"><a href="#事务传播" class="headerlink" title="事务传播"></a>事务传播</h2><ol>
<li><p>@Transactional(propagation=Propagation.REQUIRED)：默认的spring事务传播级别，如果上下文中已经存在事务，那么就加入到事务中执行，如果当前上下文中不存在事务，则新建事务执行，所以这个级别通常能满足处理大多数的业务场景。</p>
</li>
<li><p>@Transactional(propagation=PROPAGATION_SUPPORTS)：如果上下文存在事务，则支持当前事务，加入到事务执行，如果没有事务，则使用非事务的方式执行。所以说，并非所有的包在transactionTemplate.execute中的代码都会有事务支持。这个通常是用来处理那些并非原子性的非核心业务逻辑操作，应用场景较少。</p>
</li>
<li><p>@Transactional(propagation=PROPAGATION_MANDATORY)：该级别的事务要求上下文中必须要存在事务，否则就会抛出异常！配置该方式的传播级别是有效的控制上下文调用代码遗漏添加事务控制的保证手段。比如一段代码不能单独被调用执行，但是一旦被调用，就必须有事务包含的情况，就可以使用这个传播级别。</p>
</li>
<li><p>@Transactional(propagation=PROPAGATION_REQUIRES_NEW)：每次都要一个新的事务，每次都会新建一个事务，并且同时将上下文中的事务挂起，当新建事务执行完成以后，上下文事务再恢复执行。</p>
</li>
<li><p>@Transactional(propagation=PROPAGATION_NOT_SUPPORTED)：当前级别的特点是,如果上下文中存在事务，则挂起事务，执行当前逻辑，结束后恢复上下文的事务。这个级别有什么好处？可以帮助你将事务极可能的缩小。我们知道一个事务越大，它存在的风险也就越多，所以在处理事务的过程中，要保证尽可能的缩小范围。比如一段代码，是每次逻辑操作都必须调用的，比如循环1000次的某个非核心业务逻辑操作。这样的代码如果包在事务中，势必造成事务太大，导致出现一些难以考虑周全的异常情况。所以这个事务这个级别的传播级别就派上用场了，用当前级别的事务模板包起来就可以了。</p>
</li>
<li><p>@Transactional(propagation=PROPAGATION_NEVER)：一旦当前存在其他事务，就抛出runtime异常，强制停止执行！</p>
</li>
<li><p>@Transactional(propagation=PROPAGATION_NESTED)：如果上下文中存在事务，则嵌套事务执行，如果不存在事务，则新建事务。</p>
</li>
</ol>
<h2 id="数据库隔离级别"><a href="#数据库隔离级别" class="headerlink" title="数据库隔离级别"></a>数据库隔离级别</h2><table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读（Dirty Read）</th>
<th>不可重复读（NonRepeatable Read）</th>
<th>幻读（Phantom Read）</th>
</tr>
</thead>
<tbody>
<tr>
<td>未提交读（Read uncommitted）</td>
<td>可能</td>
<td>可能</td>
<td>可能</td>
</tr>
<tr>
<td>已提交读（Read committed）</td>
<td>不可能</td>
<td>可能</td>
<td>可能</td>
</tr>
<tr>
<td>可重复读（Repeatable read）</td>
<td>不可能</td>
<td>不可能</td>
<td>可能</td>
</tr>
<tr>
<td>可串行化（Serializable ）</td>
<td>不可能</td>
<td>不可能</td>
<td>不可能</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>名词</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>脏读</td>
<td>一事务对数据进行了增删改，但未提交，另一事务可以读取到未提交的数据。如果第一个事务这时候回滚了，那么第二个事务就读到了脏数据</td>
</tr>
<tr>
<td>不可重复读</td>
<td>一个事务中发生了两次读操作，第一次读操作和第二次操作之间，另外一个事务对数据进行了修改，这时候两次读取的数据是不一致的</td>
</tr>
<tr>
<td>幻读</td>
<td>第一个事务对一定范围的数据进行批量修改，第二个事务在这个范围增加一条数据，这时候第一个事务就会丢失对新增数据的修改</td>
</tr>
</tbody>
</table>
<h2 id="数据库默认隔离级别"><a href="#数据库默认隔离级别" class="headerlink" title="数据库默认隔离级别"></a>数据库默认隔离级别</h2><table>
<thead>
<tr>
<th>数据库</th>
<th>默认级别</th>
</tr>
</thead>
<tbody>
<tr>
<td>MYSQL</td>
<td>REPEATABLE_READ</td>
</tr>
<tr>
<td>SQLSERVER</td>
<td>READ_COMMITTED</td>
</tr>
<tr>
<td>ORACLE</td>
<td>READ_COMMITTED</td>
</tr>
</tbody>
</table>
<h2 id="Spring事务隔离"><a href="#Spring事务隔离" class="headerlink" title="Spring事务隔离"></a>Spring事务隔离</h2><p>@Transactional(isolation = Isolation.隔离级别)</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>DEFAULT</td>
<td>这是个 PlatfromTransactionManager 默认的隔离级别，使用数据库默认的事务隔离级别。</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>事务串行执行，资源消耗最大</td>
</tr>
<tr>
<td>REPEATABLE_READ</td>
<td>保证了一个事务不会修改已经由另一个事务读取但未提交（回滚）的数据。避免了“脏读取”和“不可重复读取”的情况，但是带来了更多的性能损失。</td>
</tr>
<tr>
<td>READ_COMMITTED</td>
<td>大多数主流数据库的默认事务等级，保证了一个事务不会读到另一个并行事务已修改但未提交的数据，避免了“脏读取”，该级别适用于大多数系统。</td>
</tr>
<tr>
<td>READ_UNCOMMITTED</td>
<td>这是事务最低的隔离级别，它充许另外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读和幻像读。</td>
</tr>
</tbody>
</table>
<h2 id="Spring事务回滚"><a href="#Spring事务回滚" class="headerlink" title="Spring事务回滚"></a>Spring事务回滚</h2><p>spring使用声明式事务处理，默认情况下，如果被注解的数据库操作方法中发生了unchecked异常，所有的数据库操作将rollback；如果发生的异常是checked异常，默认情况下数据库操作还是会提交的。</p>
<p>rollbackFor：该属性用于设置需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，则进行事务回滚。例如：<br>指定单一异常类：@Transactional(rollbackFor=RuntimeException.class)；<br>指定多个异常类：@Transactional(rollbackFor={RuntimeException.class, Exception.class})</p>
<p>rollbackForClassName：该属性用于设置需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，则进行事务回滚。例如：<br>指定单一异常类名称：@Transactional(rollbackForClassName=”RuntimeException”)；<br>指定多个异常类名称：@Transactional(rollbackForClassName={“RuntimeException”,”Exception”})</p>
<p>noRollbackFor：该属性用于设置不需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，不进行事务回滚。例如：<br>指定单一异常类：@Transactional(noRollbackFor=RuntimeException.class)；<br>指定多个异常类：@Transactional(noRollbackFor={RuntimeException.class, Exception.class})</p>
<p>noRollbackForClassName：该属性用于设置不需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，不进行事务回滚。例如：<br>指定单一异常类名称：@Transactional(noRollbackForClassName=”RuntimeException”)；<br>指定多个异常类名：@Transactional(noRollbackForClassName={“RuntimeException”,”Exception”})</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;事务传递&quot;&gt;&lt;a href=&quot;#事务传递&quot; class=&quot;headerlink&quot; title=&quot;事务传递&quot;&gt;&lt;/a&gt;事务传递&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xnocv.com1.z0.glb.clouddn.com/spring-tx-1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://fun90.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Java集合</title>
    <link href="http://fun90.github.io/2015/08/06/java-collection/"/>
    <id>http://fun90.github.io/2015/08/06/java-collection/</id>
    <published>2015-08-06T13:03:09.000Z</published>
    <updated>2017-07-14T09:19:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>总结了几张简单的图</p>
<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p><img src="http://7xnocv.com1.z0.glb.clouddn.com/java-collection-1.png" alt="List"></p>
<p>图中的绿色的虚线代表实现，绿色实线代表接口之间的继承，蓝色实线代表类之间的继承。</p>
<a id="more"></a>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><img src="http://7xnocv.com1.z0.glb.clouddn.com/java-collection-2.png" alt="Map"></p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p><img src="http://7xnocv.com1.z0.glb.clouddn.com/java-collection-3.png" alt="区别表格"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结了几张简单的图&lt;/p&gt;
&lt;h2 id=&quot;Collection&quot;&gt;&lt;a href=&quot;#Collection&quot; class=&quot;headerlink&quot; title=&quot;Collection&quot;&gt;&lt;/a&gt;Collection&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xnocv.com1.z0.glb.clouddn.com/java-collection-1.png&quot; alt=&quot;List&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中的绿色的虚线代表实现，绿色实线代表接口之间的继承，蓝色实线代表类之间的继承。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://fun90.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>FastDFS安装笔记</title>
    <link href="http://fun90.github.io/2015/07/29/fastdfs-install/"/>
    <id>http://fun90.github.io/2015/07/29/fastdfs-install/</id>
    <published>2015-07-29T13:10:03.000Z</published>
    <updated>2017-06-20T06:51:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h2><ol>
<li>系统版本为CentOS 7</li>
<li>fastdfs版本选用的5.05</li>
</ol>
<p>注意：系统版本不一样，相关命令会有差异</p>
<h2 id="下载准备"><a href="#下载准备" class="headerlink" title="下载准备"></a>下载准备</h2><p><img src="http://7xnocv.com1.z0.glb.clouddn.com/fastdfs-install-1.png" alt=""><br><a id="more"></a><br>选用fastdfsz的版本是5.05，区别于以往版本，这个版本将公共的一些函数等单独封装成了libfastcommon这个jar包，所以在安装fastdfs之前，我们必须先安装libfastcommon。</p>
<h2 id="安装libfastcommon"><a href="#安装libfastcommon" class="headerlink" title="安装libfastcommon"></a>安装libfastcommon</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /opt</div><div class="line">wget https://github.com/happyfish100/libfastcommon/archive/master.zip</div><div class="line">unzip master.zip</div><div class="line"><span class="built_in">cd</span> libfastcommon-master</div><div class="line">./make.sh</div><div class="line">./make.sh install</div></pre></td></tr></table></figure>
<p>缺少依赖包，出现如下错误：<br><img src="http://7xnocv.com1.z0.glb.clouddn.com/fastdfs-install-2.png" alt=""></p>
<p>安装依赖包<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install gcc perl</div></pre></td></tr></table></figure></p>
<p>再次安装libcofastcommon<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/opt/libfastcommon-master &amp;&amp; ./make.sh &amp;&amp; ./make.sh install</div></pre></td></tr></table></figure></p>
<h2 id="安装fastdfs"><a href="#安装fastdfs" class="headerlink" title="安装fastdfs"></a>安装fastdfs</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget  https://github.com/happyfish100/fastdfs/archive/V5.05.tar.gz</div><div class="line">tar -zxvf V5.05.tar.gz </div><div class="line"><span class="built_in">cd</span> fastdfs-5.05/</div><div class="line">./make.sh</div><div class="line">./make.sh install</div></pre></td></tr></table></figure>
<p>安装完成后，所有可执行文件在目录/usr/bin下，以fdfs_开头：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ls /usr/bin/fdfs_*</div><div class="line">/usr/bin/fdfs_appender_test   /usr/bin/fdfs_monitor</div><div class="line">/usr/bin/fdfs_appender_test1  /usr/bin/fdfs_storaged</div><div class="line">/usr/bin/fdfs_append_file     /usr/bin/fdfs_test</div><div class="line">/usr/bin/fdfs_crc32           /usr/bin/fdfs_test1</div><div class="line">/usr/bin/fdfs_delete_file     /usr/bin/fdfs_trackerd</div><div class="line">/usr/bin/fdfs_download_file   /usr/bin/fdfs_upload_appender</div><div class="line">/usr/bin/fdfs_file_info       /usr/bin/fdfs_upload_file</div></pre></td></tr></table></figure></p>
<p>配置文件在目录/etc/fdfs下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ls /etc/fdfs</div><div class="line">client.conf.sample  storage.conf.sample  tracker.conf.sample</div></pre></td></tr></table></figure></p>
<h2 id="配置Tracker跟踪器"><a href="#配置Tracker跟踪器" class="headerlink" title="配置Tracker跟踪器"></a>配置Tracker跟踪器</h2><p>开放tracker监听端口访问<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --zone=public --add-port=22122/tcp --permanent</div><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure></p>
<p>修改Tracker配置文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir -p /home/fastdfs</div><div class="line"><span class="built_in">cd</span> /etc/fdfs</div><div class="line">cp tracker.conf.sample tracker.conf</div><div class="line">sed -i <span class="string">'s:base_path=.*:base_path=/home/fastdfs:g'</span> tracker.conf</div></pre></td></tr></table></figure></p>
<p>设置Tracker便捷管理命令<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">bash -c <span class="string">'cat &gt; /usr/lib/systemd/system/fdfs_trackerd.service &lt;&lt; EOF</span></div><div class="line">[Unit]</div><div class="line">Description=fastdfs tracker server</div><div class="line">After=network.target</div><div class="line">[Service]</div><div class="line">Type=forking</div><div class="line">PIDFile=/home/fastdfs/data/fdfs_trackerd.pid</div><div class="line">ExecStart=/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf</div><div class="line">ExecReload=/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart</div><div class="line">ExecStop=/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf stop</div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div><div class="line">EOF'</div><div class="line">systemctl <span class="built_in">enable</span> fdfs_trackerd.service</div></pre></td></tr></table></figure></p>
<p>启动tracker<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start fdfs_trackerd.service</div></pre></td></tr></table></figure></p>
<p>查看启动tracker日志，确认tracker是否启动成功<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /home/fastdfs/logs/trackerd.log</div></pre></td></tr></table></figure></p>
<h2 id="配置Storage存储节点"><a href="#配置Storage存储节点" class="headerlink" title="配置Storage存储节点"></a>配置Storage存储节点</h2><p>开放Storage监听端口访问<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --zone=public --add-port=23000/tcp --permanent</div><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure></p>
<p>修改Storage配置文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mkdir -p /home/fastdfs</div><div class="line"><span class="built_in">cd</span> /etc/fdfs</div><div class="line">cp storage.conf.sample storage.conf</div><div class="line">cp /opt/fastdfs-5.05/conf/http.conf .</div><div class="line">cp /opt/fastdfs-5.05/conf/mime.types .</div><div class="line">sed -i <span class="string">'s:base_path=.*:base_path=/home/fastdfs:g'</span> storage.conf</div><div class="line">sed -i <span class="string">'s:store_path0=.*:store_path0=/home/fastdfs:g'</span> storage.conf</div><div class="line">sed -i <span class="string">'s/tracker_server=.*/tracker_server=192.168.0.80:22122/g'</span> storage.conf</div></pre></td></tr></table></figure></p>
<p>设置Storage便捷管理命令<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">bash -c <span class="string">'cat &gt; /usr/lib/systemd/system/fdfs_storaged.service &lt;&lt; EOF</span></div><div class="line">[Unit]</div><div class="line">Description=fastdfs storage server</div><div class="line">After=network.target</div><div class="line">[Service]</div><div class="line">Type=forking</div><div class="line">PIDFile=/home/fastdfs/data/fdfs_storaged.pid</div><div class="line">ExecStart=/usr/bin/fdfs_storaged /etc/fdfs/storage.conf</div><div class="line">ExecReload=/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart</div><div class="line">ExecStop=/usr/bin/fdfs_storaged /etc/fdfs/storage.conf stop</div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div><div class="line">EOF'</div><div class="line">systemctl <span class="built_in">enable</span> fdfs_storaged.service</div></pre></td></tr></table></figure></p>
<p>启动Storage<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start fdfs_storaged.service</div></pre></td></tr></table></figure></p>
<p>查看启动Storage日志，确认Storage是否启动成功<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /home/fastdfs/logs/storaged.log</div></pre></td></tr></table></figure></p>
<h2 id="配置Client客户端"><a href="#配置Client客户端" class="headerlink" title="配置Client客户端"></a>配置Client客户端</h2><p>这里搭建的是测试环境，所以Client与Tracker、Storage都安装在同一台机器上<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir -p /home/fastdfs</div><div class="line"><span class="built_in">cd</span> /etc/fdfs</div><div class="line">cp client.conf.sample client.conf</div><div class="line">sed -i <span class="string">'s:base_path=.*:base_path=/home/fastdfs:g'</span> client.conf</div><div class="line">sed -i <span class="string">'s/tracker_server=.*/tracker_server=192.168.0.80:22122/g'</span> client.conf</div></pre></td></tr></table></figure></p>
<h2 id="FastDFS测试"><a href="#FastDFS测试" class="headerlink" title="FastDFS测试"></a>FastDFS测试</h2><p>上传测试<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/fdfs_upload_file /etc/fdfs/client.conf /opt/Tulips.jpg</div></pre></td></tr></table></figure></p>
<p><img src="http://7xnocv.com1.z0.glb.clouddn.com/fastdfs-install-3.png" alt=""></p>
<p>查看文件信息<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/fdfs_file_info /etc/fdfs/client.conf group1/M00/00/00/wKgAUFXByOmAVJ5kAABzaUPC-FA256.jpg</div></pre></td></tr></table></figure></p>
<p><img src="http://7xnocv.com1.z0.glb.clouddn.com/fastdfs-install-4.png" alt=""><br>下载测试<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/fdfs_download_file /etc/fdfs/client.conf group1/M00/00/00/wKgAUFXByOmAVJ5kAABzaUPC-FA256.jpg downtest.jpg</div></pre></td></tr></table></figure></p>
<p>重启命令<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/bin/fdfs_trackerd  /etc/fdfs/tracker.conf  restart</div><div class="line">/usr/bin/fdfs_storaged  /etc/fdfs/storage.conf  restart</div></pre></td></tr></table></figure></p>
<h2 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h2><p>安装缺少的依赖包<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yum install gcc-c++ </div><div class="line">yum install pcre pcre-devel </div><div class="line">yum install zlib zlib-devel </div><div class="line">yum install openssl openssl--devel</div></pre></td></tr></table></figure></p>
<p>解压nginx-1.7.12.tar.gz，编译安装Nginx<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tar -zxvf nginx-1.7.12.tar.gz</div><div class="line"><span class="built_in">cd</span> /opt/nginx-1.7.12</div><div class="line">./configure --prefix=/opt/nginx --user=nginx --group=nginx --with-pcre --with-debug --add-module=/opt/fastdfs-nginx-module-master/src</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure></p>
<p>安装完最后会列出配置信息<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Configuration summary</div><div class="line">  + using PCRE library: /usr/lib64</div><div class="line">  + OpenSSL library is not used</div><div class="line">  + using <span class="built_in">builtin</span> md5 code</div><div class="line">  + sha1 library is not found</div><div class="line">  + using zlib library: /usr/lib64</div><div class="line">  nginx path prefix: <span class="string">"/opt/nginx"</span></div><div class="line">  nginx binary file: <span class="string">"/opt/nginx/sbin/nginx"</span></div><div class="line">  nginx configuration prefix: <span class="string">"/opt/nginx/conf"</span></div><div class="line">  nginx configuration file: <span class="string">"/opt/nginx/conf/nginx.conf"</span></div><div class="line">  nginx pid file: <span class="string">"/opt/nginx/logs/nginx.pid"</span></div><div class="line">  nginx error <span class="built_in">log</span> file: <span class="string">"/opt/nginx/logs/error.log"</span></div><div class="line">  nginx http access <span class="built_in">log</span> file: <span class="string">"/opt/nginx/logs/access.log"</span></div><div class="line">  nginx http client request body temporary files: <span class="string">"client_body_temp"</span></div><div class="line">  nginx http proxy temporary files: <span class="string">"proxy_temp"</span></div><div class="line">  nginx http fastcgi temporary files: <span class="string">"fastcgi_temp"</span></div><div class="line">  nginx http uwsgi temporary files: <span class="string">"uwsgi_temp"</span></div><div class="line">  nginx http scgi temporary files: <span class="string">"scgi_temp"</span></div></pre></td></tr></table></figure></p>
<p>防火墙开发HTTP服务<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --permanent --zone=public --add-service=http</div><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure></p>
<p>创建nginx用户<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">useradd nginx</div><div class="line">passwd</div></pre></td></tr></table></figure></p>
<p>启动nginx<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/opt/nginx/sbin/nginx</div></pre></td></tr></table></figure></p>
<p>查看端口<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -tnlp|grep nginx</div></pre></td></tr></table></figure></p>
<p><img src="http://7xnocv.com1.z0.glb.clouddn.com/fastdfs-install-6.png" alt=""></p>
<p>浏览器访问<br><img src="http://7xnocv.com1.z0.glb.clouddn.com/fastdfs-install-7.png" alt=""></p>
<p>其他命令<br>Nginx -s stop         快速关闭Nginx，可能不保存相关信息，并迅速终止web服务。（quick exit）<br>Nginx -s quit         平稳关闭Nginx，保存相关信息，有安排的结束web服务。（graceful exit）<br>Nginx -s reload       因改变了Nginx相关配置，需要重新加载配置而重载。（changing configuration，start a new worker,quitting an old worker gracefully.)<br>Nginx -s reopen       重新打开日志文件。(reopenging log files)</p>
<h2 id="fastdfs-nginx-module-配置"><a href="#fastdfs-nginx-module-配置" class="headerlink" title="fastdfs-nginx-module 配置"></a>fastdfs-nginx-module 配置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cp /opt/fastdfs-nginx-module-master/src/mod_fastdfs.conf /etc/fdfs/</div><div class="line">touch /home/fastdfs/logs/mod_fastdfs.log</div><div class="line">chown nginx:nginx /home/fastdfs/logs/mod_fastdfs.log</div><div class="line">vi /etc/fdfs/mod_fastdfs.conf</div></pre></td></tr></table></figure>
<p>修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">base_path=/home/fastdfs</div><div class="line">tracker_server=192.168.0.80:22122</div><div class="line">store_path0=/home/fastdfs</div><div class="line">log_filename=/home/fastdfs/logs/mod_fastdfs.log</div></pre></td></tr></table></figure></p>
<p>##<br>Storage服务器Nginx配置<br>/usr/local/nginx/conf/nginx.conf 上server{} 里添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location ~/group1/M00 &#123;</div><div class="line">    alias /home/fastdfs/data;</div><div class="line">    ngx_fastdfs_module;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Nginx重新加载配置<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/opt/nginx/sbin/nginx <span class="_">-s</span> reload</div></pre></td></tr></table></figure></p>
<h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><p>1、当上传文件时发现总是失败返回response status 2 !=0，查看storaged.log发现如下错误：<br><img src="http://7xnocv.com1.z0.glb.clouddn.com/fastdfs-install-5.png" alt=""><br>用fdfs_monitor命令查看storage节点状态<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/fdfs_monitor /etc/fdfs/storage.conf</div></pre></td></tr></table></figure></p>
<p>发现两个离线状态的无效storage节点，用以下命令删除之<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fdfs_monitor /etc/fdfs/client.conf delete group1 192.168.0.80</div></pre></td></tr></table></figure></p>
<p>重启tracker及storage服务，问题解决。<br>未深入分析原因。</p>
<p>2、访问图片出现400错误<br>查看日志/home/fastdfs/logs/mod_fastdfs.log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[2015-07-30 16:24:13] ERROR - file: ../common/fdfs_global.c, line: 52, the format of filename &quot;group1/M00/00/00/wKgAUFW53n-AZ5X2AABzaUPC-FA370.jpg&quot; is invalid</div></pre></td></tr></table></figure></p>
<p>/opt/nginx/logs/error.log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192.168.0.170 - - [30/Jul/2015:16:13:06 +0800] &quot;GET /group1/M00/00/00/wKgAUFW5w4iAViuiAABVNkmGVeE577.xml HTTP/1.1&quot; 400 575 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.124 Safari/537.36&quot;</div></pre></td></tr></table></figure></p>
<p>后查明是因为url中带了group名字，FastDFS是默认关闭的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">url_have_group_name=false</div></pre></td></tr></table></figure></p>
<p>将以上参数改为true即可<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed <span class="string">'s:url_have_group_name.*:url_have_group_name=true:g'</span> /etc/fdfs/mod_fastdfs.conf</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;版本说明&quot;&gt;&lt;a href=&quot;#版本说明&quot; class=&quot;headerlink&quot; title=&quot;版本说明&quot;&gt;&lt;/a&gt;版本说明&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;系统版本为CentOS 7&lt;/li&gt;
&lt;li&gt;fastdfs版本选用的5.05&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意：系统版本不一样，相关命令会有差异&lt;/p&gt;
&lt;h2 id=&quot;下载准备&quot;&gt;&lt;a href=&quot;#下载准备&quot; class=&quot;headerlink&quot; title=&quot;下载准备&quot;&gt;&lt;/a&gt;下载准备&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xnocv.com1.z0.glb.clouddn.com/fastdfs-install-1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="FastDFS" scheme="http://fun90.github.io/tags/FastDFS/"/>
    
  </entry>
  
  <entry>
    <title>FastDFS资料整理</title>
    <link href="http://fun90.github.io/2015/07/22/fastdfs-info/"/>
    <id>http://fun90.github.io/2015/07/22/fastdfs-info/</id>
    <published>2015-07-22T15:04:11.000Z</published>
    <updated>2017-06-20T06:53:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>需求至上，最近的，尽心费神，搭建图片服务器，研究了下分布式存储，最后选用了轻量级的fastdfs，刚接触使用难免会踩坑，整理些互联网上的资料都是大牛们的走过的路，这些资料能尽量避免少踩坑。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>最先看的是由FastDFS的作者<a href="https://github.com/happyfish100" target="_blank" rel="external">happyfish100</a>发表的<a href="http://history.programmer.com.cn/4380/" target="_blank" rel="external">分布式文件系统FastDFS架构剖析</a></p>
<h2 id="原理篇"><a href="#原理篇" class="headerlink" title="原理篇"></a>原理篇</h2><p><a href="http://www.cnblogs.com/dinglang/p/4608915.html" target="_blank" rel="external">大型网站图片服务器架构的演进</a></p>
<p><a href="http://tech.uc.cn/?p=221" target="_blank" rel="external">分布式文件系统FastDFS原理介绍</a><br><a id="more"></a></p>
<h2 id="实践篇"><a href="#实践篇" class="headerlink" title="实践篇"></a>实践篇</h2><p><a href="http://tech.uc.cn/?p=2579" target="_blank" rel="external">FastDFS使用经验分享</a></p>
<p><a href="http://bbs.chinaunix.net/thread-1920470-1-1.html" target="_blank" rel="external">FastDFS问题集锦</a></p>
<p><a href="http://blog.csdn.net/poechant/article/details/6987403" target="_blank" rel="external">FastDFS的配置、部署与API使用解读</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需求至上，最近的，尽心费神，搭建图片服务器，研究了下分布式存储，最后选用了轻量级的fastdfs，刚接触使用难免会踩坑，整理些互联网上的资料都是大牛们的走过的路，这些资料能尽量避免少踩坑。&lt;/p&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;最先看的是由FastDFS的作者&lt;a href=&quot;https://github.com/happyfish100&quot;&gt;happyfish100&lt;/a&gt;发表的&lt;a href=&quot;http://history.programmer.com.cn/4380/&quot;&gt;分布式文件系统FastDFS架构剖析&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;原理篇&quot;&gt;&lt;a href=&quot;#原理篇&quot; class=&quot;headerlink&quot; title=&quot;原理篇&quot;&gt;&lt;/a&gt;原理篇&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/dinglang/p/4608915.html&quot;&gt;大型网站图片服务器架构的演进&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tech.uc.cn/?p=221&quot;&gt;分布式文件系统FastDFS原理介绍&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="FastDFS" scheme="http://fun90.github.io/tags/FastDFS/"/>
    
  </entry>
  
  <entry>
    <title>Java后台验证组件</title>
    <link href="http://fun90.github.io/2015/06/20/fun-validation/"/>
    <id>http://fun90.github.io/2015/06/20/fun-validation/</id>
    <published>2015-06-20T12:54:49.000Z</published>
    <updated>2016-01-14T02:57:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中前端和后端的验证都必不可少，公司使用的框架是基于Spring MVC开发，但未对验证做相应的解决方案，在网上找到了Validation.FO的验证框架，顿时被其简洁的设计所吸引，经过对其自定义的拓展开发，集成到了项目中。</p>
<h2 id="Validation-FO-框架说明"><a href="#Validation-FO-框架说明" class="headerlink" title="Validation.FO 框架说明"></a>Validation.FO 框架说明</h2><ol>
<li>这是一个验证框架，并且是一个 独立的验证框架 ，不依赖与其他已有的框架；</li>
<li>可以自由的嵌入到其他框架，比如Spring、Struts等流行框架，但实质来说他是独立的，所以无所谓嵌入到哪里，如果需要在GUI桌面应用中，也是完美的；</li>
<li>配置简单，可自由扩展验证器，实际只要实现IValidator接口，以及在rules.fo.xml中添加相关的配置即可；</li>
<li>支持Spring接口</li>
<li>使用过程中，你会感觉好像只用了 IValidateService.validate() 一个方法，这会让人感觉良好<a id="more"></a>
</li>
</ol>
<h2 id="Validation-FO-相关资料"><a href="#Validation-FO-相关资料" class="headerlink" title="Validation.FO 相关资料"></a>Validation.FO 相关资料</h2><p><a href="http://www.cnblogs.com/41zone/p/4041727.html" target="_blank" rel="external">Validation.FO 使用指南</a></p>
<p><a href="https://github.com/41zone/Validation.FO/wiki" target="_blank" rel="external">Validation.FO 项目主页</a></p>
<h2 id="配置繁多的缺点"><a href="#配置繁多的缺点" class="headerlink" title="配置繁多的缺点"></a>配置繁多的缺点</h2><p>虽然Validation.FO这款验证框架有诸多的有点，但配置起来很是繁琐，基本没有可供公用的配置，而项目中很多地方的参数校验是通用的。</p>
<h2 id="改进后的Fun-Validation"><a href="#改进后的Fun-Validation" class="headerlink" title="改进后的Fun.Validation"></a>改进后的Fun.Validation</h2><p>基于Validation.FO修改后，虽然加入了引用和继承公用的配置，但这套设计是基于配置不可避免的仍然需要很多配置，目前尚未找到更好的设计方案。</p>
<p><a href="https://github.com/fun90/fun-validation" target="_blank" rel="external">Fun.Validation的项目主页</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在项目中前端和后端的验证都必不可少，公司使用的框架是基于Spring MVC开发，但未对验证做相应的解决方案，在网上找到了Validation.FO的验证框架，顿时被其简洁的设计所吸引，经过对其自定义的拓展开发，集成到了项目中。&lt;/p&gt;
&lt;h2 id=&quot;Validation-FO-框架说明&quot;&gt;&lt;a href=&quot;#Validation-FO-框架说明&quot; class=&quot;headerlink&quot; title=&quot;Validation.FO 框架说明&quot;&gt;&lt;/a&gt;Validation.FO 框架说明&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;这是一个验证框架，并且是一个 独立的验证框架 ，不依赖与其他已有的框架；&lt;/li&gt;
&lt;li&gt;可以自由的嵌入到其他框架，比如Spring、Struts等流行框架，但实质来说他是独立的，所以无所谓嵌入到哪里，如果需要在GUI桌面应用中，也是完美的；&lt;/li&gt;
&lt;li&gt;配置简单，可自由扩展验证器，实际只要实现IValidator接口，以及在rules.fo.xml中添加相关的配置即可；&lt;/li&gt;
&lt;li&gt;支持Spring接口&lt;/li&gt;
&lt;li&gt;使用过程中，你会感觉好像只用了 IValidateService.validate() 一个方法，这会让人感觉良好
    
    </summary>
    
    
      <category term="Validation" scheme="http://fun90.github.io/tags/Validation/"/>
    
      <category term="Java" scheme="http://fun90.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数字类型区别与选择</title>
    <link href="http://fun90.github.io/2014/02/15/mysql-number-type/"/>
    <id>http://fun90.github.io/2014/02/15/mysql-number-type/</id>
    <published>2014-02-15T14:07:36.000Z</published>
    <updated>2017-07-04T03:04:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xnocv.com1.z0.glb.clouddn.com/java-regex-01.jpg" alt=""></p>
<p>在开发中遇到需要替换JSON字符串某个key对应的双引号字符串，最后选择使用正则表达式来解决，接下来看看如何解决？</p>
<a id="more"></a>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>有JSON字符串：<code>{&quot;code&quot;:&quot;kokf&quot;,&quot;params&quot;:&quot;{\&quot;branchCode\&quot;:\&quot;yNeWWnKb\&quot;,\&quot;vendorCode\&quot;:\&quot;zvuXEixA\&quot;}&quot;,&quot;timestamp&quot;:&quot;1499092515370&quot;}</code>，需要匹配到params对应的值(包括引号)，即：<strong>“{\”branchCode\”:\”yNeWWsMnKb\”,\”vendorCode\”:\”zvuXEiqtxA\”}”</strong></p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>Java代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Pattern paramsRegex = Pattern.compile(<span class="string">"(\"params\"\\s*:\\s*)((?&lt;!\\\\)\".*?(?&lt;!\\\\)\")"</span>);</div><div class="line">String sourceParams = matcher.group(<span class="number">2</span>); <span class="comment">// 匹配到params对应的参数内容</span></div></pre></td></tr></table></figure>
<p>注意：在Java正则表达式中的反斜杠标识表示为\\，而在字符串中\必须使用\\来表示，所以最后正则表达式的字符串为”\\\\”</p>
<h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><table>
<thead>
<tr>
<th>断言类型</th>
<th>表达式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>零宽度负回顾后发断言</td>
<td>(?&lt;!exp)</td>
<td>匹配前面不是exp的位置</td>
</tr>
<tr>
<td>零宽度负预测先行断言</td>
<td>(?!exp)</td>
<td>匹配后面跟的不是exp的位置</td>
</tr>
<tr>
<td>零宽度正预测先行断言</td>
<td>(?=exp)</td>
<td>匹配exp前面的位置</td>
</tr>
<tr>
<td>零宽度正回顾后发断言</td>
<td>(?&lt;=exp)</td>
<td>匹配exp后面的位置</td>
</tr>
</tbody>
</table>
<p>这里使用的是零宽度负回顾后发断言，<code>(?&lt;!\\)&quot;</code>匹配双引号『”』但是双引号『”』前面<strong>不是</strong>\</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xnocv.com1.z0.glb.clouddn.com/java-regex-01.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在开发中遇到需要替换JSON字符串某个key对应的双引号字符串，最后选择使用正则表达式来解决，接下来看看如何解决？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://fun90.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java正则表达式匹配引号内容</title>
    <link href="http://fun90.github.io/2014/02/10/java-regex-double-quoted/"/>
    <id>http://fun90.github.io/2014/02/10/java-regex-double-quoted/</id>
    <published>2014-02-10T15:36:27.000Z</published>
    <updated>2017-07-03T15:37:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xnocv.com1.z0.glb.clouddn.com/java-regex-01.jpg" alt=""></p>
<p>在开发中遇到需要替换JSON字符串某个key对应的双引号字符串，最后选择使用正则表达式来解决，接下来看看如何解决？</p>
<a id="more"></a>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>有JSON字符串：<code>{&quot;code&quot;:&quot;kokf&quot;,&quot;params&quot;:&quot;{\&quot;branchCode\&quot;:\&quot;yNeWWnKb\&quot;,\&quot;vendorCode\&quot;:\&quot;zvuXEixA\&quot;}&quot;,&quot;timestamp&quot;:&quot;1499092515370&quot;}</code>，需要匹配到params对应的值(包括引号)，即：<strong>“{\”branchCode\”:\”yNeWWsMnKb\”,\”vendorCode\”:\”zvuXEiqtxA\”}”</strong></p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>Java代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Pattern paramsRegex = Pattern.compile(<span class="string">"(\"params\"\\s*:\\s*)((?&lt;!\\\\)\".*?(?&lt;!\\\\)\")"</span>);</div><div class="line">String sourceParams = matcher.group(<span class="number">2</span>); <span class="comment">// 匹配到params对应的参数内容</span></div></pre></td></tr></table></figure>
<p>注意：在Java正则表达式中的反斜杠标识表示为\\，而在字符串中\必须使用\\来表示，所以最后正则表达式的字符串为”\\\\”</p>
<h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><table>
<thead>
<tr>
<th>断言类型</th>
<th>表达式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>零宽度负回顾后发断言</td>
<td>(?&lt;!exp)</td>
<td>匹配前面不是exp的位置</td>
</tr>
<tr>
<td>零宽度负预测先行断言</td>
<td>(?!exp)</td>
<td>匹配后面跟的不是exp的位置</td>
</tr>
<tr>
<td>零宽度正预测先行断言</td>
<td>(?=exp)</td>
<td>匹配exp前面的位置</td>
</tr>
<tr>
<td>零宽度正回顾后发断言</td>
<td>(?&lt;=exp)</td>
<td>匹配exp后面的位置</td>
</tr>
</tbody>
</table>
<p>这里使用的是零宽度负回顾后发断言，<code>(?&lt;!\\)&quot;</code>匹配双引号『”』但是双引号『”』前面<strong>不是</strong>\</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xnocv.com1.z0.glb.clouddn.com/java-regex-01.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在开发中遇到需要替换JSON字符串某个key对应的双引号字符串，最后选择使用正则表达式来解决，接下来看看如何解决？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://fun90.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>AJAX跨域POST问题(HTTP,HTTPS)</title>
    <link href="http://fun90.github.io/2014/02/05/xmlhttprequest-cros/"/>
    <id>http://fun90.github.io/2014/02/05/xmlhttprequest-cros/</id>
    <published>2014-02-05T14:48:36.000Z</published>
    <updated>2017-07-14T09:20:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器遵循<a href="https://en.wikipedia.org/wiki/Same-origin_policy" target="_blank" rel="external">同源策略(same-origin policy)</a>，它不允许当前站点的脚本与不同源的站点之间进行数据交互，只要协议、域名、端口有任何一个不同，都被视为不同源。但有时确实又必须在当前站点通过Ajax请求其他不同源的资源，这明显与同源策略相悖，于是就有了JavaScript跨域问题。</p>
<p>至于为什么要有同源策略，可以Google一下同源策略的详解，这里只记录如何解决Ajax跨域POst的问题，包括不同协议(HTTP, HTTPS)之间的Ajax请求。跨域问题的解决办法有很多，对于端口和协议的不同，只能通过后台来解决。</p>
<h2 id="跨域资源共享-CORS"><a href="#跨域资源共享-CORS" class="headerlink" title="跨域资源共享(CORS)"></a>跨域资源共享(CORS)</h2><h3 id="CORS原理"><a href="#CORS原理" class="headerlink" title="CORS原理"></a>CORS原理</h3><p>CORS（Cross-Origin Resource Sharing）跨域资源共享，定义了一种跨域访问的机制，当必须在访问跨域资源时，浏览器与服务器应该如何沟通。CORS背后的基本思想就是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是失败。<br><a id="more"></a></p>
<h2 id="CORS实现"><a href="#CORS实现" class="headerlink" title="CORS实现"></a>CORS实现</h2><p>通过CORS的机制可以让AJAX实现跨域访问，一个域上的网络应用向另一个域提交跨域AJAX请求，开发人员只需在接受请求的服务端新增响应头Access-Control-Allow-Origin即可，剩下的就交给浏览器与服务端去沟通了。</p>
<p>举个例子，浏览器打开的站点A.com给站点B.com发送AJAX请求，并得到B.com返回的数据进行处理，浏览器与B.com的服务端的交互过程如下：</p>
<ol>
<li>在A.com的脚本发出跨域请求时，浏览器会先发出一个OPTIONS请求到B.com站点，用于查明这个跨域请求对于B.com站点是不是安全可接受的。</li>
<li>B.com后台服务端收到请求时：<ul>
<li>如果响应头中新增了Access-Control-Allow-Origin来表明允许A.com的跨域请求，那么A.com的跨域AJAX请求可以正常执行下去。</li>
<li>否则，A.com的浏览器会报错：<code>XMLHttpRequest cannot load http://B.com/api?p=a. No&#39;Access-Control-Allow-Origin&#39; header is present on the requested resource。 Origin &#39;A.com&#39; is therefore not allowed access.</code></li>
</ul>
</li>
</ol>
<h2 id="CORS浏览器支持情况"><a href="#CORS浏览器支持情况" class="headerlink" title="CORS浏览器支持情况"></a>CORS浏览器支持情况</h2><p><img src="http://7xnocv.com1.z0.glb.clouddn.com/xmlhttprequest-cros-02.png" alt=""></p>
<h2 id="所遇问题"><a href="#所遇问题" class="headerlink" title="所遇问题"></a>所遇问题</h2><ol>
<li><p>通过给XHR实例设置withCredentials属性的，必须为同源才可以。<br>如：<code>xhr.withCredentials = true</code></p>
</li>
<li><p>对于是POST和存在自定义HTTP头时无数据响应<br>这两种情况可以通过添加Access-Control-Allow-Methods/Access-Control-Allow-Headers来解决。</p>
</li>
<li><p>对于多个站点域要跨域调用怎么办？<br>搜了一下，有说通过空格分隔开<code>Access-Control-Allow-Origin: http://a.com http://c.com</code>，有说通过逗号分隔开的<code>Access-Control-Allow-Origin: http://a.com, http://c.com</code>，没有进行验证测试。<br>(Access-Control-Allow-Origin: *)表示允许任何域都可以提交请求。</p>
</li>
</ol>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"http://A.com"</span>);</div><div class="line">response.addHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"GET, POST, OPTIONS"</span>);</div><div class="line">response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With"</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器遵循&lt;a href=&quot;https://en.wikipedia.org/wiki/Same-origin_policy&quot;&gt;同源策略(same-origin policy)&lt;/a&gt;，它不允许当前站点的脚本与不同源的站点之间进行数据交互，只要协议、域名、端口有任何一个不同，都被视为不同源。但有时确实又必须在当前站点通过Ajax请求其他不同源的资源，这明显与同源策略相悖，于是就有了JavaScript跨域问题。&lt;/p&gt;
&lt;p&gt;至于为什么要有同源策略，可以Google一下同源策略的详解，这里只记录如何解决Ajax跨域POst的问题，包括不同协议(HTTP, HTTPS)之间的Ajax请求。跨域问题的解决办法有很多，对于端口和协议的不同，只能通过后台来解决。&lt;/p&gt;
&lt;h2 id=&quot;跨域资源共享-CORS&quot;&gt;&lt;a href=&quot;#跨域资源共享-CORS&quot; class=&quot;headerlink&quot; title=&quot;跨域资源共享(CORS)&quot;&gt;&lt;/a&gt;跨域资源共享(CORS)&lt;/h2&gt;&lt;h3 id=&quot;CORS原理&quot;&gt;&lt;a href=&quot;#CORS原理&quot; class=&quot;headerlink&quot; title=&quot;CORS原理&quot;&gt;&lt;/a&gt;CORS原理&lt;/h3&gt;&lt;p&gt;CORS（Cross-Origin Resource Sharing）跨域资源共享，定义了一种跨域访问的机制，当必须在访问跨域资源时，浏览器与服务器应该如何沟通。CORS背后的基本思想就是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是失败。&lt;br&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://fun90.github.io/tags/Web/"/>
    
      <category term="JavaScript" scheme="http://fun90.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>MySQL获取汉字拼音首字母函数</title>
    <link href="http://fun90.github.io/2014/01/25/mysql-pinyin/"/>
    <id>http://fun90.github.io/2014/01/25/mysql-pinyin/</id>
    <published>2014-01-25T13:49:05.000Z</published>
    <updated>2017-07-03T15:40:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>功能：支持多个汉字<br>用法：SELECT PINYIN(‘单身不是狗’);<br>+———————-+<br>| PINYIN(‘单身不是狗’) |<br>+———————-+<br>| DSBSG                |<br>+———————-+<br>1 row in set</p>
<p>注意：数据库的字符编码集得是UTF8或GBK才行。<br><a id="more"></a></p>
<h2 id="第一步、创建表"><a href="#第一步、创建表" class="headerlink" title="第一步、创建表"></a>第一步、创建表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`pinyin`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`pinyin`</span> (</div><div class="line">  <span class="string">`letter`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`chinese`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span>  (<span class="string">`letter`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=MyISAM <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=gbk;</div></pre></td></tr></table></figure>
<h2 id="第二步、插入拼音数据"><a href="#第二步、插入拼音数据" class="headerlink" title="第二步、插入拼音数据"></a>第二步、插入拼音数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`pinyin`</span> <span class="keyword">VALUES</span></div><div class="line">(<span class="string">'A'</span>,<span class="string">'驁'</span>),</div><div class="line">(<span class="string">'B'</span>,<span class="string">'簿'</span>),</div><div class="line">(<span class="string">'C'</span>,<span class="string">'錯'</span>),</div><div class="line">(<span class="string">'D'</span>,<span class="string">'鵽'</span>),</div><div class="line">(<span class="string">'E'</span>,<span class="string">'樲'</span>),</div><div class="line">(<span class="string">'F'</span>,<span class="string">'鰒'</span>),</div><div class="line">(<span class="string">'G'</span>,<span class="string">'腂'</span>),</div><div class="line">(<span class="string">'H'</span>,<span class="string">'夻'</span>),</div><div class="line">(<span class="string">'J'</span>,<span class="string">'攈'</span>),</div><div class="line">(<span class="string">'K'</span>,<span class="string">'穒'</span>),</div><div class="line">(<span class="string">'L'</span>,<span class="string">'鱳'</span>),</div><div class="line">(<span class="string">'M'</span>,<span class="string">'旀'</span>),</div><div class="line">(<span class="string">'N'</span>,<span class="string">'桛'</span>),</div><div class="line">(<span class="string">'O'</span>,<span class="string">'漚'</span>),</div><div class="line">(<span class="string">'P'</span>,<span class="string">'曝'</span>),</div><div class="line">(<span class="string">'Q'</span>,<span class="string">'囕'</span>),</div><div class="line">(<span class="string">'R'</span>,<span class="string">'鶸'</span>),</div><div class="line">(<span class="string">'S'</span>,<span class="string">'蜶'</span>),</div><div class="line">(<span class="string">'T'</span>,<span class="string">'籜'</span>),</div><div class="line">(<span class="string">'W'</span>,<span class="string">'鶩'</span>),</div><div class="line">(<span class="string">'X'</span>,<span class="string">'鑂'</span>),</div><div class="line">(<span class="string">'Y'</span>,<span class="string">'韻'</span>),</div><div class="line">(<span class="string">'Z'</span>,<span class="string">'咗'</span>);</div></pre></td></tr></table></figure>
<h2 id="第三步、创建函数"><a href="#第三步、创建函数" class="headerlink" title="第三步、创建函数"></a>第三步、创建函数</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">DELIMITER $$</div><div class="line"> </div><div class="line">DROP FUNCTION IF EXISTS `PINYIN`$$</div><div class="line"> </div><div class="line">CREATE FUNCTION `PINYIN`(str CHAR(255)) RETURNS char(255)</div><div class="line">BEGIN</div><div class="line">DECLARE hexCode char(4);</div><div class="line">DECLARE pinyin varchar(255);</div><div class="line">DECLARE firstChar char(1);</div><div class="line">DECLARE aChar char(1);</div><div class="line">DECLARE pos int;</div><div class="line">DECLARE strLength int;</div><div class="line"> </div><div class="line">SET pinyin    = '';</div><div class="line">SET strLength = CHAR_LENGTH(LTRIM(RTRIM(str)));</div><div class="line">SET pos       = 1;</div><div class="line">SET @str      = (CONVERT(str USING gbk));</div><div class="line">WHILE pos &lt;= strLength DO</div><div class="line">	SET @aChar = SUBSTRING(@str,pos,1);</div><div class="line">	SET hexCode = HEX(@aChar); </div><div class="line"> </div><div class="line">	IF hexCode &gt;= "8140" AND hexCode &lt;= "FEA0" THEN</div><div class="line">		SELECT letter into firstChar</div><div class="line">		FROM   pinyin</div><div class="line">		WHERE  chinese &gt;= @aChar</div><div class="line">		LIMIT  1;</div><div class="line">	ELSE </div><div class="line">	  SET firstChar = @aChar;</div><div class="line">	END IF;</div><div class="line"> </div><div class="line">	SET pinyin = CONCAT(pinyin,firstChar);</div><div class="line">	SET pos = pos + 1;</div><div class="line">END WHILE;  </div><div class="line"> </div><div class="line">RETURN UPPER(pinyin);</div><div class="line">END$$</div><div class="line"> </div><div class="line">DELIMITER ;</div></pre></td></tr></table></figure>
<p>大功告成！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;功能：支持多个汉字&lt;br&gt;用法：SELECT PINYIN(‘单身不是狗’);&lt;br&gt;+———————-+&lt;br&gt;| PINYIN(‘单身不是狗’) |&lt;br&gt;+———————-+&lt;br&gt;| DSBSG                |&lt;br&gt;+———————-+&lt;br&gt;1 row in set&lt;/p&gt;
&lt;p&gt;注意：数据库的字符编码集得是UTF8或GBK才行。&lt;br&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="http://fun90.github.io/tags/MySQL/"/>
    
      <category term="DB" scheme="http://fun90.github.io/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>编程高手的进阶之路</title>
    <link href="http://fun90.github.io/2014/01/15/programming-genius/"/>
    <id>http://fun90.github.io/2014/01/15/programming-genius/</id>
    <published>2014-01-15T15:18:46.000Z</published>
    <updated>2017-07-14T09:20:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于外界，Coding是被神化的，似乎需要极高的智商和热情才能从事这个行业。</p>
<p>IT界聪明的人很多，但极具天赋真正的能称之为天才的人不多，一般人们口中所谓的天才，只不过是比平常人更快的掌握技能、完成工作罢了；只要你找到了正确的方向，并辅以足够的时间，你一样能够踏上成功彼岸。</p>
<p>工作中解决问题的途径有很多，你能最快想到的方法一部分取决于你的天赋另一部分是靠经验。事实上，大部分人由于平时的工作繁重，不会去思考寻找最优的解决方案，写的代码能刚好满足需求就算完事了。这样无法得到提示你甚至会无形中加重自己的工作量，因为随着年龄的增长，属于你自己的时间会越来越少，你的精力会被生活瓜分。</p>
<p>如何才能得到最优秀的方案呢？</p>
<p>首先，我们得知道什么才是最优秀的解决方案，最优解决方案需要你能够走在需求的前面，将当前需求里有的、没有直接提出来的、现在暂时没有但将来可能有的等等，及编程潜规则等各个方方面面都综合考虑，给出最优方案。以一招胜万招。</p>
<p>你不再被需求牵着走，而是你牵着需求走。注重细节，注意那些当前需求里没有明文给出的细节：代码性能的差异、运行平台（浏览器）的差异、需求的隐性扩展、代码的向后兼容等等。<br><a id="more"></a></p>
<h2 id="搜索引擎是最好的老师"><a href="#搜索引擎是最好的老师" class="headerlink" title="搜索引擎是最好的老师"></a>搜索引擎是最好的老师</h2><p>打开搜索引擎，穷举所有的搜索结果。自己建立测试环境一一验证这些代码：去揣摩每段代码的意图，去比较每段代码之间的差异。这两条路可以让你快速完成原始积累，当你再面对大多数需求时能够说这些问题我以前做过，那你就水到渠成地晋阶了。</p>
<p>积累各种能够解决需求的方案，然后再验证每个方案，在这些方案中选择最好的一种。因此该阶段的进阶之路就是”行万里路，看万卷书”，积累各个需求的各个解决方案。</p>
<p>举个例子：删除一字符串中指定的字符。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">"www.baidu.com/?page=1"</span>;</div><div class="line">str=str.replace(<span class="string">'?page=1'</span>,<span class="string">""</span>);</div><div class="line">alert(str);</div><div class="line">str=str.substring(<span class="number">0</span>,str.indexof(<span class="string">"/"</span>));</div><div class="line">alert(str);</div></pre></td></tr></table></figure></p>
<p>首先不要苛责代码的对错严谨，毕竟每个程序员都有这样的一个过程；其次，这两段代码在这个实例里没有什么大过错，可能会有瑕疵，但能够解决问题（删除指定的字符），这就是这个级别的特征。</p>
<p>另外举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 计算系统当前是星期几</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">""</span>;</div><div class="line"><span class="keyword">var</span> week = <span class="keyword">new</span> date().getday();</div><div class="line"><span class="keyword">if</span> (week == <span class="number">0</span>) &#123;</div><div class="line">        str = <span class="string">"今天是星期日"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">1</span>) &#123;</div><div class="line">        str = <span class="string">"今天是星期一"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">2</span>) &#123;</div><div class="line">        str = <span class="string">"今天是星期二"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">3</span>) &#123;</div><div class="line">        str = <span class="string">"今天是星期三"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">4</span>) &#123;</div><div class="line">        str = <span class="string">"今天是星期四"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">5</span>) &#123;</div><div class="line">        str = <span class="string">"今天是星期五"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">6</span>) &#123;</div><div class="line">        str = <span class="string">"今天是星期六"</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 或者更好一些</span></div><div class="line"><span class="keyword">var</span> str1 = <span class="string">"今天是星期"</span>;</div><div class="line"><span class="keyword">var</span> week = <span class="keyword">new</span> date().getday();</div><div class="line"><span class="keyword">switch</span> (week) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span> :</div><div class="line">                str1 += <span class="string">"日"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span> :</div><div class="line">                str1 += <span class="string">"一"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span> :</div><div class="line">                str1 += <span class="string">"二"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span> :</div><div class="line">                str1 += <span class="string">"三"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">4</span> :</div><div class="line">                str1 += <span class="string">"四"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">5</span> :</div><div class="line">                str1 += <span class="string">"五"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">6</span> :</div><div class="line">                str1 += <span class="string">"六"</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line">alert(str);</div><div class="line">alert(str1);</div></pre></td></tr></table></figure></p>
<p>能够正确地解决问题。不管你是通过搜索网络，或者通过改造某些成品代码（jquery/dojo/ext/yui）案例，只要能够无错地完成需求。</p>
<p>“字符串剪裁”代码进化版：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var str=&quot;www.baidu.com/?page=1&quot;;</div><div class="line">str=str.replace(/?page/,&quot;&quot;);</div><div class="line">alert(str);</div></pre></td></tr></table></figure></p>
<p>说明：replace方法的第一个参数虽然可以支持字符串，但最佳的类型是正则表达式；</p>
<p>“计算系统当前星期几”代码进化版：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> array(<span class="string">"日"</span>, <span class="string">"一"</span>, <span class="string">"二"</span>, <span class="string">"三"</span>, <span class="string">"四"</span>, <span class="string">"五"</span>, <span class="string">"六"</span>);</div><div class="line"><span class="keyword">var</span> week = <span class="keyword">new</span> date().getday();</div><div class="line"><span class="keyword">var</span> str = <span class="string">"今天是星期"</span>+ a[week];</div><div class="line">alert(str);</div></pre></td></tr></table></figure></p>
<p>说明：不管是从代码量、代码效率、代码优美性、代码思路来说，这个版本的这个日期处理代码都要优秀很多。</p>
<p>到了进化版，是不是最优秀的解决方案了呢？不一定，很多时候还需要根据实际情况来决定。</p>
<p>比如“字符串剪裁”的例子 ：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">"www.baidu.com/?page=1"</span>;</div><div class="line"><span class="comment">// 1、字符串剪裁</span></div><div class="line">str.substring(<span class="number">0</span>, str.indexof(<span class="string">"?page=1"</span>));</div><div class="line"><span class="comment">// 2、正则表达式</span></div><div class="line">str.replace(<span class="regexp">/?page=1/</span>, <span class="string">""</span>);</div><div class="line"><span class="comment">// 3、字符串分拆、合并</span></div><div class="line">str.split(<span class="string">"?page"</span>).join(<span class="string">""</span>);</div></pre></td></tr></table></figure></p>
<p>1、2、3有什么区别呢？从代码量来说”正则表达式”最优秀；从代码执行效率来说： “字符串剪裁”法最高（chrome中”正则表达式”效率最高），split法最次；从可扩展性上来说，”正则表达式”法最优。具体使用那种方案视具体的需求环境而定。</p>
<p>再比如“计算系统当前星期几”的例子是不是最优秀的代码呢？请看下面的实现方式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 计算系统当前是星期几</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">"今天是星期"</span> + <span class="string">"日一二三四五六"</span>.charat(<span class="keyword">new</span> date().getday());</div></pre></td></tr></table></figure></p>
<p>不要问我为什么，要成为优秀的程序员就是要这么倔强地追去完美。</p>
<p>通过一段时间的努力，很多人能够达到这个水平，但是，很大一部分人的编程能力也就止步于此。或限于产品的需求单一性，或限于需求开发的时间紧迫性，或限于人的惰性，能够完美地解决当前的需求就够了。</p>
<p>由于长期处于技术平台期，技术上得不到提高，通常这个级别的工程师会比较燥。技术上小有所成；或追求个人的突破；或追求产品差异性带来的新鲜感；或者只是想换个心情；因此很多此级别的工程师会经常换公司。</p>
<h2 id="如何走在需求前面？"><a href="#如何走在需求前面？" class="headerlink" title="如何走在需求前面？"></a>如何走在需求前面？</h2><p>“字符串剪裁”的例子已经很完美的解决了当前的问题，但如果有一天原始的url变成了“www.baidu.com/?size=10&amp;page=1”呢？所以当我们拿到“www.baidu.com/?page=1”的需求后，需要考虑很多没有直接提出来的、现在暂时没有但将来可能有的情况，如下面：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"http://www.xxx.com/?pn=0"</span>;   <span class="comment">// 删除指定字符 pn=0</span></div><div class="line"><span class="comment">// 我将这个字符串里所可能想到的各种情况都列举出来</span></div><div class="line"><span class="keyword">var</span> a = [</div><div class="line">         <span class="string">"http://www.xxx.com/vmpn=?pn=0"</span><span class="comment">// pn= 可能出现在 ? 前</span></div><div class="line">        , <span class="string">"http://www.xxx.com/vmpn=?pn="</span><span class="comment">// url里允许pn 值为空</span></div><div class="line">        , <span class="string">"http://www.xxx.com/vmpn=?pn=0&amp;a=1"</span><span class="comment">// url 里可有多个字段</span></div><div class="line">        , <span class="string">"http://www.xxx.com/vmpn=?a=1&amp;pn=0"</span><span class="comment">// 可能排在最后</span></div><div class="line">        , <span class="string">"http://www.xxx.com/vmpn=?a=1&amp;pn=0&amp;pn=1"</span><span class="comment">// 可能有多个 pn 字段</span></div><div class="line">        , <span class="string">"http://www.xxx.com/vmpn=?a=1&amp;pn=0&amp;b=2"</span><span class="comment">// 可能在中间</span></div><div class="line">        , <span class="string">"http://www.xxx.com/vmpn=?a=1&amp;pn=0&amp;pn=1&amp;b=1"</span>  <span class="comment">// 可能在中间成组</span></div><div class="line">        , <span class="string">"http://www.xxx.com/vmpn=?a=1&amp;pn=0&amp;b=1&amp;pn=1"</span>  <span class="comment">// 可能零星分布</span></div><div class="line">];</div><div class="line"><span class="comment">/* 需求的不言之秘：</span></div><div class="line">? 若出现在字符串最尾则要去之</div><div class="line">? &amp; 两个符号不可重叠</div><div class="line">*/</div><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/((\?)(pn=[^&amp;]*&amp;)+(?!pn=))|(((\?|&amp;)pn=[^&amp;]*)+$)|(&amp;pn=[^&amp;]*)/g</span>;</div><div class="line"> </div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</div><div class="line">    alert(a + <span class="string">"\n"</span> + a.replace(reg, <span class="string">"$2"</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里不再追求一招一式，对你来说不是使用什么创新绝招解决需求，而是给出成熟稳重的方案，从根上解决问题。针对某个当前需求你的代码可能不是最优，但是针对此类的需求你的代码却是最优秀的代码。</p>
<p>到了这一步单单依靠技巧和数量的累积已经没有什么效果了，建议在这个阶段末尾着重关注编程理论：面向对象/过程、代码组织形式、编译、代码规范、其它的框架设计等等<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 在拼接正则表达式字符串时，消除原字符串中特殊字符对正则表达式的干扰</div><div class="line">* @author: fun90</div><div class="line">* @version: 2012/12/16</div><div class="line">* @param               &#123;string&#125;        str     被正则表达式字符串保护编码的字符串</div><div class="line">* @return              &#123;string&#125;                被保护处理过后的字符串</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">escapereg</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> str.replace(<span class="keyword">new</span> regexp(<span class="string">"([.*+?^=!:\x24&#123;&#125;()|[\\]\/\\\\])"</span>, <span class="string">"g"</span>), <span class="string">"\\\x241"</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">/**</span></div><div class="line">* 删除url字符串中指定的 query</div><div class="line">* @author:fun90</div><div class="line">* @version:2012/12/16</div><div class="line">* @param               &#123;string&#125;        url     url字符串</div><div class="line">* @param               &#123;string&#125;        key     被删除的query名</div><div class="line">* @return              &#123;string&#125;                被删除指定 query 后的url字符串</div><div class="line">*/</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">delurlquery</span>(<span class="params">url, key</span>) </span>&#123;</div><div class="line">        key = escapereg(key);</div><div class="line">        <span class="keyword">var</span> reg = <span class="keyword">new</span> regexp(<span class="string">"((\\?)("</span>+ key +<span class="string">"=[^&amp;]*&amp;)+(?!"</span>+ key +</div><div class="line">  <span class="string">"=))|(((\\?|&amp;)"</span>+ key +<span class="string">"=[^&amp;]*)+$)|(&amp;"</span>+ key +<span class="string">"=[^&amp;]*)"</span>, <span class="string">"g"</span>);</div><div class="line">        <span class="keyword">return</span> url.replace(reg, <span class="string">"\x241"</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 应用实例</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">"http://www.xxx.com/?pn=0"</span>;   <span class="comment">// 删除指定字符 pn=0</span></div><div class="line">delurlquery(str, <span class="string">"pn"</span>);</div></pre></td></tr></table></figure></p>
<p>这段代码与前一段代码从实现上来说没有太大的区别，但是从思路上来说却有着本质的区别：1、不再是就事论事，头疼医头，而是把一类问题抽象理论化，一招破万招；2、有封装的概念，不再是每次从零开始，而是站在半山腰开始爬。</p>
<p>现在可以多观察语言的组织结构，语言设计；看看原型链，链式语法编程，泛型，接口编程，dom遥控器等等；仔细阅读成熟的web前端开发框架的设计文档，看他们为什么要这样设计。</p>
<h2 id="自成体系，化茧成蝶"><a href="#自成体系，化茧成蝶" class="headerlink" title="自成体系，化茧成蝶"></a>自成体系，化茧成蝶</h2><p>知道为什么这样设计，也知道什么样的设计最好。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 库文件 /util/string/escapereg.js</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 在拼接正则表达式字符串时，消除原字符串中特殊字符对正则表达式的干扰</div><div class="line">* @author: fun90</div><div class="line">* @version: 2012/12/16</div><div class="line">* @param               &#123;string&#125;        str     被正则表达式字符串保护编码的字符串</div><div class="line">* @return              &#123;string&#125;                被保护处理过后的字符串</div><div class="line">*/</div><div class="line">util.string.escapereg = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> str.replace(<span class="keyword">new</span> regexp(<span class="string">"([.*+?^=!:\x24&#123;&#125;()|[\\]\/\\\\])"</span>, <span class="string">"g"</span>), <span class="string">"\\\x241"</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// 库文件 /util/url/delquery.js</span></div><div class="line"><span class="comment">/// include util.string.escapereg;</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 删除url字符串中指定的 query</div><div class="line">* @author:meizz</div><div class="line">* @version:2010/12/16</div><div class="line">* @param               &#123;string&#125;        url     url字符串</div><div class="line">* @param               &#123;string&#125;        key     被删除的query名</div><div class="line">* @return              &#123;string&#125;                被删除指定 query 后的url字符串</div><div class="line">*/</div><div class="line">util.url.delquery = <span class="function"><span class="keyword">function</span> (<span class="params">url, key</span>) </span>&#123;</div><div class="line">        key = util.string.escapereg(key);</div><div class="line">        <span class="keyword">var</span> reg = <span class="keyword">new</span> regexp(<span class="string">"((\\?)("</span>+ key +<span class="string">"=[^&amp;]*&amp;)+(?!"</span>+ key +</div><div class="line">  <span class="string">"=))|(((\\?|&amp;)"</span>+ key +<span class="string">"=[^&amp;]*)+$)|(&amp;"</span>+ key +<span class="string">"=[^&amp;]*)"</span>, <span class="string">"g"</span>);</div><div class="line">        <span class="keyword">return</span> url.replace(reg, <span class="string">"\x241"</span>)</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// 应用实例</span></div><div class="line"><span class="comment">/// include util.url.delquery;</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">"http://www.xxx.com/?pn=0"</span>;   <span class="comment">// 删除指定字符 pn=0</span></div><div class="line">util.url.delquery(str, <span class="string">"pn"</span>);</div></pre></td></tr></table></figure>
<p>经过不懈努力，经历思索磨砺，积累发散，成就辉煌。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于外界，Coding是被神化的，似乎需要极高的智商和热情才能从事这个行业。&lt;/p&gt;
&lt;p&gt;IT界聪明的人很多，但极具天赋真正的能称之为天才的人不多，一般人们口中所谓的天才，只不过是比平常人更快的掌握技能、完成工作罢了；只要你找到了正确的方向，并辅以足够的时间，你一样能够踏上成功彼岸。&lt;/p&gt;
&lt;p&gt;工作中解决问题的途径有很多，你能最快想到的方法一部分取决于你的天赋另一部分是靠经验。事实上，大部分人由于平时的工作繁重，不会去思考寻找最优的解决方案，写的代码能刚好满足需求就算完事了。这样无法得到提示你甚至会无形中加重自己的工作量，因为随着年龄的增长，属于你自己的时间会越来越少，你的精力会被生活瓜分。&lt;/p&gt;
&lt;p&gt;如何才能得到最优秀的方案呢？&lt;/p&gt;
&lt;p&gt;首先，我们得知道什么才是最优秀的解决方案，最优解决方案需要你能够走在需求的前面，将当前需求里有的、没有直接提出来的、现在暂时没有但将来可能有的等等，及编程潜规则等各个方方面面都综合考虑，给出最优方案。以一招胜万招。&lt;/p&gt;
&lt;p&gt;你不再被需求牵着走，而是你牵着需求走。注重细节，注意那些当前需求里没有明文给出的细节：代码性能的差异、运行平台（浏览器）的差异、需求的隐性扩展、代码的向后兼容等等。&lt;br&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://fun90.github.io/tags/Web/"/>
    
      <category term="Java" scheme="http://fun90.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Github同步代码</title>
    <link href="http://fun90.github.io/2014/01/12/github-syn/"/>
    <id>http://fun90.github.io/2014/01/12/github-syn/</id>
    <published>2014-01-12T14:12:43.000Z</published>
    <updated>2016-01-14T07:35:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>Git是个非常强大的源代码管理系统，能支持复杂的任务。似乎强大和复杂是一对孪生兄弟，Git的操作也不那么简单，让人有种手握重权却不知道怎么玩的尴尬，以及对自己智商的严重怀疑。下面是最基本的Git工作步骤，让我们找回一点点自信吧。</p>
<h2 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h2><p>在本地尚未配置好Git的，请先查看<a href="/2014/01/10/github-blog/#配置Git">如何配置Git</a></p>
<h2 id="远程到本地"><a href="#远程到本地" class="headerlink" title="远程到本地"></a>远程到本地</h2><h3 id="全新克隆"><a href="#全新克隆" class="headerlink" title="全新克隆"></a>全新克隆</h3><p>如果本地目录是从未使用的空目录（没有远程代码库的本地版本）<br><a id="more"></a></p>
<ol>
<li><p>先找到远程代码库的链接<br><img src="http://7xnocv.com1.z0.glb.clouddn.com/github-syn-01.png" alt=""></p>
</li>
<li><p>在该文件夹下打开Git命令行，输入：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/你的用户名/你的远程代码库名</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="更新代码"><a href="#更新代码" class="headerlink" title="更新代码"></a>更新代码</h3><p>本地目录有远程代码库的本地版本，想从远程代码库上取得最新版本，在本地目录（项目根目录）下打开Git命令行，输入：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin master</div></pre></td></tr></table></figure></p>
<h2 id="本地到远程"><a href="#本地到远程" class="headerlink" title="本地到远程"></a>本地到远程</h2><h3 id="第一步：加载文件"><a href="#第一步：加载文件" class="headerlink" title="第一步：加载文件"></a>第一步：加载文件</h3><p>修改的本地文件需要进行加载<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure></p>
<p>其中“.”是将项目中所有修改过的文件和目录加载进去，如果只想加载特定的文件或目录，就将“.”换成文件或目录名<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add 文件或目录名</div></pre></td></tr></table></figure></p>
<h3 id="第二步：提交文件"><a href="#第二步：提交文件" class="headerlink" title="第二步：提交文件"></a>第二步：提交文件</h3><p>将第一步中加载过的文件提交到远程代码库，提交时必须附带有意义的注释。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">"这里写提交的注释"</span></div></pre></td></tr></table></figure></p>
<h3 id="第三步：推送文件"><a href="#第三步：推送文件" class="headerlink" title="第三步：推送文件"></a>第三步：推送文件</h3><p>第二步正常提交后，还需要我们发送命令行将代码推送到远程代码库</p>
<p>1、配置<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin https://github.com/你的用户名/你的远程代码库名</div></pre></td></tr></table></figure></p>
<p>其中的origin是远程代码库的别名，可以使用其他任何你喜欢的词。甚至可以给本地代码配置多个远程代码库，只需要给他们取不同的别名。</p>
<p>2、推送<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure></p>
<p>稍后你会被提示要求输入你的加密串，这个加密串跟在配置Git时输入的加密串，验证通过后本地代码库就会被推送到远程代码库中。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Git是个非常强大的源代码管理系统，能支持复杂的任务。似乎强大和复杂是一对孪生兄弟，Git的操作也不那么简单，让人有种手握重权却不知道怎么玩的尴尬，以及对自己智商的严重怀疑。下面是最基本的Git工作步骤，让我们找回一点点自信吧。&lt;/p&gt;
&lt;h2 id=&quot;配置Git&quot;&gt;&lt;a href=&quot;#配置Git&quot; class=&quot;headerlink&quot; title=&quot;配置Git&quot;&gt;&lt;/a&gt;配置Git&lt;/h2&gt;&lt;p&gt;在本地尚未配置好Git的，请先查看&lt;a href=&quot;/2014/01/10/github-blog/#配置Git&quot;&gt;如何配置Git&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;远程到本地&quot;&gt;&lt;a href=&quot;#远程到本地&quot; class=&quot;headerlink&quot; title=&quot;远程到本地&quot;&gt;&lt;/a&gt;远程到本地&lt;/h2&gt;&lt;h3 id=&quot;全新克隆&quot;&gt;&lt;a href=&quot;#全新克隆&quot; class=&quot;headerlink&quot; title=&quot;全新克隆&quot;&gt;&lt;/a&gt;全新克隆&lt;/h3&gt;&lt;p&gt;如果本地目录是从未使用的空目录（没有远程代码库的本地版本）&lt;br&gt;
    
    </summary>
    
    
      <category term="Github" scheme="http://fun90.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hexo简单笔记</title>
    <link href="http://fun90.github.io/2014/01/11/hexo-guide/"/>
    <id>http://fun90.github.io/2014/01/11/hexo-guide/</id>
    <published>2014-01-11T01:19:06.000Z</published>
    <updated>2016-01-14T02:52:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h2><p>_config.yml 配置文件，respsitory配置为自己的仓库地址，注意type为git</p>
<pre><code>deploy:
  type: git
  repository: https://github.com/funxiong/fun90.github.io.git
  branch: master 
</code></pre><p>修改文章访问地址:</p>
<pre><code>permalink: :year/:month/:day/:id/
</code></pre><p>source 博客数据源文件，其中的_post目录即是文章源文件(.md文件)</p>
<p>themes 主题存放目录，推荐主题：Jacman(<a href="http://wuchong.me/jacman/2014/11/20/how-to-use-jacman/" target="_blank" rel="external">如何使用 Jacman 主题</a>)</p>
<a id="more"></a>
<h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>执行new命令，生成指定名称的文章至hexo\source_posts\postName.md。、</p>
<pre><code>hexo new &quot;postName&quot;
</code></pre><p>或者</p>
<p>在source_posts目录下新建.md的文件，文件内容：</p>
<pre><code>title: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中
date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改
categories: #文章分类目录，可以为空，注意:后面有个空格
tags: #文章标签，可空，多标签请用格式[tag1,tag2,tag3]
----

正文
</code></pre><h2 id="生成页面"><a href="#生成页面" class="headerlink" title="生成页面"></a>生成页面</h2><p>执行generate命令，生成静态页面</p>
<pre><code>hexo generate
</code></pre><p>或者简写</p>
<pre><code>hexo g
</code></pre><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>执行server命令，浏览器输入<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 预览文章</p>
<pre><code>hexo server
</code></pre><p>或者简写</p>
<pre><code>hexo s
</code></pre><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>执行deploy命令，发布到Github服务器(注意把_config.yml的发布方式及地址配好)</p>
<pre><code>hexo deploy
</code></pre><p>或者简写</p>
<pre><code>hexo d
</code></pre><h2 id="相关教程"><a href="#相关教程" class="headerlink" title="相关教程"></a>相关教程</h2><p><a href="http://wowubuntu.com/markdown" target="_blank" rel="external">Markdown语法教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hexo配置&quot;&gt;&lt;a href=&quot;#Hexo配置&quot; class=&quot;headerlink&quot; title=&quot;Hexo配置&quot;&gt;&lt;/a&gt;Hexo配置&lt;/h2&gt;&lt;p&gt;_config.yml 配置文件，respsitory配置为自己的仓库地址，注意type为git&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deploy:
  type: git
  repository: https://github.com/funxiong/fun90.github.io.git
  branch: master 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改文章访问地址:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;permalink: :year/:month/:day/:id/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;source 博客数据源文件，其中的_post目录即是文章源文件(.md文件)&lt;/p&gt;
&lt;p&gt;themes 主题存放目录，推荐主题：Jacman(&lt;a href=&quot;http://wuchong.me/jacman/2014/11/20/how-to-use-jacman/&quot;&gt;如何使用 Jacman 主题&lt;/a&gt;)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Github" scheme="http://fun90.github.io/tags/Github/"/>
    
      <category term="Hexo" scheme="http://fun90.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Github搭建独立博客</title>
    <link href="http://fun90.github.io/2014/01/10/github-blog/"/>
    <id>http://fun90.github.io/2014/01/10/github-blog/</id>
    <published>2014-01-10T05:39:36.000Z</published>
    <updated>2017-06-20T12:11:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>春眠不觉晓，处处问题不少。才疏学浅，资质愚钝，还不刻苦努力，荒废了人生，虚度了年华，从IT男变成了IT单身狗。在开发过程中遇到的问题，翻着墙用着Goolge搜索，忽然之间很多以github.io的博客如风雨过后菊花开般崛起。冒着好奇害死猫的风险开始探个究竟，果然入坑了。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol>
<li><p><a href="http://git-scm.com/" target="_blank" rel="external">Git 下载</a></p>
</li>
<li><p><a href="http://nodejs.org/" target="_blank" rel="external">Node.js 下载</a> 版本：Windows Installer (.msi)</p>
</li>
</ol>
<p>忘了告诉你，这里是在Windows环境下的搭建，我的Mac一直在店里没去拿。</p>
<a id="more"></a> 
<h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><ol>
<li><p>安装Git，按步骤默认安装就好，安装完后在开始菜单中会有Git的目录</p>
</li>
<li><p>同样安装好Node.js，安装完后在开始菜单中会有Node.js的目录</p>
</li>
</ol>
<h2 id="注册Github"><a href="#注册Github" class="headerlink" title="注册Github"></a>注册Github</h2><p>访问：<a href="https://www.github.com/" target="_blank" rel="external">https://www.github.com/</a></p>
<p>注册你的username和邮箱，邮箱十分重要，GitHub上很多通知都是通过邮箱的。</p>
<h2 id="创建仓库（repository）"><a href="#创建仓库（repository）" class="headerlink" title="创建仓库（repository）"></a>创建仓库（repository）</h2><p>需要特别注意的就是Repository name，必须为username.github.io(useranem是指你的Github用户名)，不然不能被github解析。</p>
<h2 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h2><p>在Windows下，开始菜单中找到Git目录打开Git Bash进入命令行界面。</p>
<h3 id="检查SSH-keys的设置"><a href="#检查SSH-keys的设置" class="headerlink" title="检查SSH keys的设置"></a>检查SSH keys的设置</h3><p>首先我们需要检查你电脑上现有的ssh key：</p>
<pre><code>$ cd ~/.ssh
</code></pre><p>如果显示“No such file or directory”，跳过下一步，否则继续。</p>
<h3 id="备份和移除原来的ssh-key设置"><a href="#备份和移除原来的ssh-key设置" class="headerlink" title="备份和移除原来的ssh key设置"></a>备份和移除原来的ssh key设置</h3><p>发现已经存在ssh key，在Git Bash中输入以下命令：</p>
<pre><code>$ ls
$ config  id_rsa  id_rsa.pub  known_hosts
$ mkdir key_backup
$ cp id_rsa* key_backup
$ rm id_rsa*
</code></pre><h3 id="生成新的SSH-Key"><a href="#生成新的SSH-Key" class="headerlink" title="生成新的SSH Key"></a>生成新的SSH Key</h3><p>输入以下命令：</p>
<pre><code>$ ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;
</code></pre><p>命令行界面会出现：</p>
<pre><code>Generating public/private rsa key pair.
Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):
</code></pre><p>这时回车就可以了，然后系统会要你输入加密串</p>
<pre><code>Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;
Enter same passphrase again:&lt;再次输入加密串&gt;
</code></pre><p>最后看到这样的界面，就成功设置ssh key了：</p>
<pre><code>Your identifiaction has ban save in
省略一万字
</code></pre><p>在Windows下，进入系统盘的当前用户目录会看到.ssh目录，其中有一个叫id_rsa.pub的文件，如果看不到请设置显示隐藏文件。</p>
<h3 id="添加SSH-Key到GitHub"><a href="#添加SSH-Key到GitHub" class="headerlink" title="添加SSH Key到GitHub"></a>添加SSH Key到GitHub</h3><ol>
<li><p>设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。</p>
</li>
<li><p>登陆GitHub，点击在主页右上角的头像的Setting，找到SSH keys进入。</p>
</li>
<li><p>点击Add SSH key，然后输入Title和Key的内容：Title是自定义，不重复即可；Key则是id_ras.pub用记事本打开，负责全部内容填入。</p>
</li>
<li><p>点击下方的Add key添加完成。</p>
</li>
</ol>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在添加完成后，输入以下命令：</p>
<pre><code>ssh -T git@github.com
</code></pre><p>如果是下面的反应：</p>
<pre><code>The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)?
</code></pre><p>输入yes并回车</p>
<pre><code>Hi &lt;em&gt;username&lt;/em&gt;! You&apos;ve successfully authenticated, but GitHub does not provide shell access.
</code></pre><p>说明已经成功的设置好了SSH Key。</p>
<h3 id="设置账号信息"><a href="#设置账号信息" class="headerlink" title="设置账号信息"></a>设置账号信息</h3><p>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。</p>
<p>Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是GitHub的用户名，而不是GitHub的昵称。</p>
<pre><code>$ git config --global user.name &quot;你的名字&quot;
$ git config --global user.email &quot;your_email@youremail.com&quot;
</code></pre><p>OK，这样就可以使用Git将本地目录发布到Github的仓库中了。</p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>Github的博客主页可以使用很多种模板系统，这里用的是Hexo，打开Git Bash命令行界面输入：</p>
<pre><code>npm install -g hexo
</code></pre><p>在Windows下建立hexo的目录，我将博客放在了D:/hexo 目录下，按住Shift见在新建的hexo目录上鼠标右击，点击Git Bash进入命令行界面输入：</p>
<pre><code>hexo init
npm install
</code></pre><p>现在本地版本的hexo已经配置完成了，可以使用以下命令来生成静态文件：</p>
<pre><code>$ hexo g  这是生成静态页面的命令
$ hexo s  这是启动本地服务器的命令
</code></pre><p>然后打开浏览器输入 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 即可看到hexo的主页。</p>
<p><a href="/2014/01/11/hexo-guide">点击查看Hexo简单笔记</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;春眠不觉晓，处处问题不少。才疏学浅，资质愚钝，还不刻苦努力，荒废了人生，虚度了年华，从IT男变成了IT单身狗。在开发过程中遇到的问题，翻着墙用着Goolge搜索，忽然之间很多以github.io的博客如风雨过后菊花开般崛起。冒着好奇害死猫的风险开始探个究竟，果然入坑了。&lt;/p&gt;
&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://git-scm.com/&quot;&gt;Git 下载&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js 下载&lt;/a&gt; 版本：Windows Installer (.msi)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;忘了告诉你，这里是在Windows环境下的搭建，我的Mac一直在店里没去拿。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Github" scheme="http://fun90.github.io/tags/Github/"/>
    
      <category term="Hexo" scheme="http://fun90.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>那些年，踩过的JavaScript之坑</title>
    <link href="http://fun90.github.io/2014/01/10/javascript-pit/"/>
    <id>http://fun90.github.io/2014/01/10/javascript-pit/</id>
    <published>2014-01-10T05:39:36.000Z</published>
    <updated>2017-07-03T15:42:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>你编，或者不编程，项目就在那里，还未完成。你调，或者不调试，BUG就在那里，早晚得改。你踩，或者不踩，坑都在那里，等下一个受害者。</p>
<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><h3 id="未使用var关键字定义的变量都是全局变量"><a href="#未使用var关键字定义的变量都是全局变量" class="headerlink" title="未使用var关键字定义的变量都是全局变量"></a>未使用var关键字定义的变量都是全局变量</h3><p>在JavaScript中定义变量时漏掉var并不会报错。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    value = <span class="number">100</span>; <span class="comment">// value前没有var关键字，则声明了全局变量value并赋了值</span></div><div class="line">&#125;</div><div class="line">foo();</div><div class="line"><span class="built_in">console</span>.log(value); <span class="comment">// 输出 100</span></div></pre></td></tr></table></figure>
<a id="more"></a> 
<h3 id="没有块作用域，只有函数作用域"><a href="#没有块作用域，只有函数作用域" class="headerlink" title="没有块作用域，只有函数作用域"></a>没有块作用域，只有函数作用域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">        <span class="keyword">var</span> value = <span class="string">"hello world"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// 输出 10</span></div><div class="line">    <span class="built_in">console</span>.log(value); <span class="comment">// 输出 hello world</span></div><div class="line">&#125;</div><div class="line">foo();</div><div class="line"><span class="built_in">console</span>.log(value); <span class="comment">// ReferenceError: value is not defined</span></div></pre></td></tr></table></figure>
<p>上面的代码中可以看出，for循环外依然能访问变量i和value，但函数foo外面则无法访问。</p>
<p>如何优雅地绕过此坑：</p>
<ol>
<li>在函数体的顶部声明可能用到的变量 </li>
<li>函数体内不要使用同一名称命名不同意义的变量</li>
</ol>
<h3 id="变量的优先级"><a href="#变量的优先级" class="headerlink" title="变量的优先级"></a>变量的优先级</h3><p>下面的代码会让人觉得“匪夷所思”<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(x); <span class="comment">//输出 undefined，而不是1</span></div><div class="line">    <span class="keyword">var</span> x = <span class="number">100</span>;</div><div class="line">    <span class="built_in">console</span>.log(x); <span class="comment">//输出 100</span></div><div class="line">&#125;</div><div class="line">foo();</div></pre></td></tr></table></figure></p>
<p>WHY?</p>
<ol>
<li><p>JavaScript 是解释型语言，但它并不是直接逐步执行的，JavaScript解析过程分为先后两个阶段，一个是预处理阶段，另外一个就是执行阶段。在预处理阶段 JavaScript解释器将完成把JavaScript脚本代码转换到字节码，然后第二阶段JavaScript解释器借助执行环境把字节码生成机械 码，并顺序执行。</p>
</li>
<li><p>JavaScript的变量作用域是基于其特有的作用域链的，使用变量时JavaScript是按从下往上的顺序依次查找变量，没有找到就进入上一级直至全局变量。基于这一规则，函数体内部局部变量的优先级比同名的全局变量高。另外，函数中声明的变量在函数体内都可以使用，并可以重新赋值。</p>
</li>
</ol>
<p>因此，上面的代码同于如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> x;</div><div class="line">    <span class="built_in">console</span>.log(x); <span class="comment">//输出 undefined，而不是1</span></div><div class="line">    x = <span class="number">100</span>;</div><div class="line">    <span class="built_in">console</span>.log(x); <span class="comment">//输出 100</span></div><div class="line">&#125;</div><div class="line">foo();</div></pre></td></tr></table></figure></p>
<h3 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h3><p>在函数执行时，this 总是指向调用该函数的对象。要判断 this 的指向，其实就是判断 this 所在的函数属于谁。</p>
<p>在《javaScript语言精粹》这本书中，把 this 出现的场景分为四类，简单的说就是：</p>
<ol>
<li>有对象就指向调用对象</li>
<li>没调用对象就指向全局对象</li>
<li>用new构造就指向新对象</li>
<li>通过 apply 或 call 或 bind 来改变 this 的所指。</li>
</ol>
<p>看下面的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myObject = &#123;</div><div class="line">    <span class="attr">value</span>: <span class="number">100</span>,</div><div class="line">    <span class="attr">getValue</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// 没调用对象this指向全局对象</span></div><div class="line">            <span class="comment">//console.log(this.value); // 输出 undefined</span></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        foo();</div><div class="line"></div><div class="line">        <span class="comment">// 通过 apply 或 call 或 bind 来改变 this 的所指</span></div><div class="line">        foo.apply(myObject); <span class="comment">// 输出 myObject</span></div><div class="line">        foo.call(myObject); <span class="comment">// 输出 myObject</span></div><div class="line">        <span class="keyword">var</span> newFoo = foo.bind(myObject);</div><div class="line">        newFoo(); <span class="comment">// 输出 myObject</span></div><div class="line"></div><div class="line">        <span class="keyword">var</span> SomeClass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.value = <span class="number">200</span>; <span class="comment">// 用new构造this指向新对象</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> myCreate = <span class="keyword">new</span> SomeClass();</div><div class="line">        <span class="built_in">console</span>.log(myCreate.value); <span class="comment">// 输出200</span></div><div class="line"></div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// this指向myObject</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(myObject.getValue()); <span class="comment">// 输出 100</span></div></pre></td></tr></table></figure></p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包是指有权限访问另一个函数作用域的变量的函数，创建闭包的常见方式就是在一个函数内部创建另一个函数。<strong>只要存在调用内部函数的可能，JavaScript就需要保留被引用的函数，而且JavaScript运行时需要跟踪引用这个内部函数的所有变量，直到最后一个变量废弃，JavaScript的垃圾收集器才能释放相应的内存空间。</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>0<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> elements = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>);</div><div class="line"><span class="keyword">var</span> n = elements.length;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">    elements[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"This is element #"</span> + i);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>乍一看，上面的代码应该是点击不同按钮会输出不同的内容，但发现点击四个button都是输出“This is element # 4”，很奇怪，为什么？</p>
<p>理一下执行过程：</p>
<p>当i的值为4的时，for循环执行完毕，但是因为每个button的onclick方法这时候为内部函数，所以i被闭包引用，内存不能被销毁，i的值会一直保持4，直到程序改变它或者所有的onclick函数销毁（主动把函数赋为null或者页面卸载）时才会被回收。这样每次我们点击button的时候，onclick函数会查找i的值（作用域链是引用方式），一查等于4，然后就输出了“This is element # 4”。</p>
<p>解决：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> elements = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>);</div><div class="line"><span class="keyword">var</span> n = elements.length;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">        elements[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"This is element #"</span> + n);</div><div class="line">        &#125;</div><div class="line">    &#125;)(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第二种方式是使用了一个立即执行的函数又创建了一层闭包，函数声明放在括号内就变成了表达式，后面再加上括号括号就是调用了，这时候把i当参数传入，函数立即执行，num保存每次i的值(依次是0、1、2、3)，我们点击button的时候，就会得到我们想要的效果。</p>
<h2 id="行尾的分号"><a href="#行尾的分号" class="headerlink" title="行尾的分号"></a>行尾的分号</h2><p>Javascript代码中分号是可选的，似乎很方便，但是很不幸的是经常会遇到因为漏掉了分号出现的错误，而解释器有时对这种错误定位不明确，必须由我们自己追溯并尝试去猜测因为哪些分号漏写导致的问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">key</span>: <span class="string">"value"</span></div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(foo1()); <span class="comment">// 输出 &#123; key: 'value' &#125;</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> </div><div class="line">	&#123;</div><div class="line">        <span class="attr">a</span>: <span class="string">"hello"</span></div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(foo2()); <span class="comment">// 输出 undefined</span></div></pre></td></tr></table></figure>
<p>foo2中分号自动加到了return语句后面，所以得到了“奇怪”的结果。</p>
<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><h3 id="双等号"><a href="#双等号" class="headerlink" title="双等号"></a>双等号</h3><p>==操作符比较时会进行类型的强制转换，它可以比较两个不同类型的对象，在执行比较之前它将会尝试把这两个对象转换成同一个类型。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">""</span> == <span class="number">0</span>);   <span class="comment">//true - 空字符串会被强制转换为数字0.  </span></div><div class="line"><span class="built_in">console</span>.log(<span class="number">0</span> == <span class="string">"0"</span>);  <span class="comment">//true - 数字0会被强制转换成字符串"0"  </span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">""</span> == <span class="string">"0"</span>); <span class="comment">//false - 两操作数都是字符串所以不执行强制转换</span></div></pre></td></tr></table></figure>
<p>如果使用三重等号（===），上面的三个比较都将返回false。</p>
<h3 id="加减号"><a href="#加减号" class="headerlink" title="加减号"></a>加减号</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> (<span class="number">1</span> + <span class="string">"1"</span>), <span class="number">1</span> + <span class="string">"1"</span>); <span class="comment">// string 11 +号的操作数是数字与字符串，执行连接操作</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> (<span class="string">"1"</span> - <span class="number">1</span>), <span class="string">"1"</span> - <span class="number">1</span>); <span class="comment">// number 0 相减操作会尝试将操作数转换成数字类型</span></div></pre></td></tr></table></figure>
<h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><h3 id="浮点数运算"><a href="#浮点数运算" class="headerlink" title="浮点数运算"></a>浮点数运算</h3><p>看一个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>); <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<p>惊天BUG？</p>
<p>JavaScript只有一种数字类型Number，没有Integer和Float，Number是IEEE标准中双精度浮点运算(64位)类型。 浮点数的精度问题不是JavaScript特有的，因为有些小数以二进制表示位数是无穷的，这就意味着JavaScript中浮点数运算会有无法避免的精度丢失。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>); <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(<span class="number">0.1</span> + <span class="number">0.2</span>); <span class="comment">// 0.30000000000000004，精度丢失</span></div><div class="line"><span class="built_in">console</span>.log(<span class="number">0.0</span> === <span class="number">0</span>); <span class="comment">// true，integer和float没有区别</span></div></pre></td></tr></table></figure></p>
<p>解决：<br>在判断浮点运算结果前对计算结果进行精度缩小，因为在精度缩小的过程总会自动四舍五入:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = (<span class="number">0.1</span> + <span class="number">0.2</span>).toFixed(<span class="number">1</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> result, result); <span class="comment">// string 0.3，注意toFixed后的类型为string</span></div></pre></td></tr></table></figure></p>
<h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><p>NaN的类型是Number，NaN和任何东西比较都是false。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">NaN</span>); <span class="comment">// number</span></div><div class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>); <span class="comment">// fasle</span></div></pre></td></tr></table></figure></p>
<p>还有很多坑没记上来，还有很多坑未踩过去</p>
<p>END！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你编，或者不编程，项目就在那里，还未完成。你调，或者不调试，BUG就在那里，早晚得改。你踩，或者不踩，坑都在那里，等下一个受害者。&lt;/p&gt;
&lt;h2 id=&quot;变量作用域&quot;&gt;&lt;a href=&quot;#变量作用域&quot; class=&quot;headerlink&quot; title=&quot;变量作用域&quot;&gt;&lt;/a&gt;变量作用域&lt;/h2&gt;&lt;h3 id=&quot;未使用var关键字定义的变量都是全局变量&quot;&gt;&lt;a href=&quot;#未使用var关键字定义的变量都是全局变量&quot; class=&quot;headerlink&quot; title=&quot;未使用var关键字定义的变量都是全局变量&quot;&gt;&lt;/a&gt;未使用var关键字定义的变量都是全局变量&lt;/h3&gt;&lt;p&gt;在JavaScript中定义变量时漏掉var并不会报错。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    value = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// value前没有var关键字，则声明了全局变量value并赋了值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;foo();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(value); &lt;span class=&quot;comment&quot;&gt;// 输出 100&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://fun90.github.io/tags/Web/"/>
    
      <category term="JavaScript" scheme="http://fun90.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
